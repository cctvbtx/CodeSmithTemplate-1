<%@ Template Language="C#" TargetLanguage="C#" Src="../../../CommonCode.cs" Inherits="CodeSmithTemplate.CommonCode" Encoding="utf-8" %>
<%@ Register Template="../Helper/AssemblyFileProperty.cst" Name="AssemblyFileProperty" MergeProperties="True" %>  
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Linq" %>
<%@ Assembly Src="../../../ClassNames.cs" %>
<%@ Assembly Src="../blqw.CSComment/CSComment.cs" %>
<%@ Import Namespace="blqw.Reflection" %>
<%@ Assembly Src="../AssemblyFileHelper.cs" %>
<%@ Import Namespace="CodeSmithTemplate" %>
<%@ Import Namespace="CodeSmithTemplate.AspNet.AssemblyFile" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%
var names = GetAssemblyFileNames(DllFolder, ProjectName, EntityName, PermissionModuleName);
var assType = GetAssemblyType(names.CoreDllFile, EntityName);
var entityColumns = GetProperties(assType);
var getAllInputColumns = GetAllInputColumns(entityColumns);
var pktype = GetPropertyType(assType, names.PkName);
var pkDeaultValueString = GetPropertyDefaultValueString(assType, names.PkName);

var entityDateTimeProps = GetDateTimeProperties(getAllInputColumns);

%>
using System;
using System.Linq;
using System.Threading.Tasks;
using Abp.Authorization;
using Abp.Domain.Repositories;
using Abp.Extensions;
using Abp.Linq.Extensions;
using <%=ProjectName %>.Authorization;
using <%=ProjectName %>.Extensions;
using <%=assType.Namespace %>.Dto;

namespace <%=assType.Namespace %>
{
    /// <summary>
    /// <%=AssemblyFileHelper.GetClassSummary(assType) %>  服务实现
    /// </summary>
    public partial class <%=names.AppServiceName %> : AsyncCrudAppServiceBase<<%=EntityName %>, <%=names.QueryDtoName %>, <%=pktype %>, <%=names.GetAllInputName %>, <%=names.CreateInputName %>, <%=names.UpdateInputName %>>, I<%=names.AppServiceName %>
    {
        private readonly IRepository<<%=EntityName %>, <%=pktype %>> _<%=names.RepositoryName %>;
        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="<%=names.RepositoryName %>"></param>
        public <%=names.AppServiceName %>(IRepository<<%=EntityName %>, <%=pktype %>> <%=names.RepositoryName %>) : base(<%=names.RepositoryName %>)
        {
            GetAllPermissionName = <%=names.AppServicePermissionPrefix %>;
            CreatePermissionName = <%=names.AppServicePermissionPrefix %>_Create;
            UpdatePermissionName = <%=names.AppServicePermissionPrefix %>_Edit;
            DeletePermissionName = <%=names.AppServicePermissionPrefix %>_Delete;
            
            _<%=names.RepositoryName %> = <%=names.RepositoryName %>;
        }
        
        /// <summary>
        /// 查询条件
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        protected override IQueryable<<%=EntityName %>> CreateFilteredQuery(<%=names.GetAllInputName %> input)
        {
            //var filters = input.Filter.ToStringArray();
            <%foreach(var col in entityDateTimeProps) {%>
            var <%=ToFirstLetterCamel(col.Name) %>Range = input.<%=col.Name %>.ToDateTimeRange();
            <%} %>
            
            return base.CreateFilteredQuery(input)
                //.WhereIf(filters.Any(), a => a.BizNo.Contains(input.Filter) || filters.Contains(a.BizNo))
                <%foreach (var col in getAllInputColumns){%>
                <%if(GetCSharpTypeByProp(col)=="DateTime"){ %>
                .WhereIf(<%=ToFirstLetterCamel(col.Name) %>Range != null, d => d.<%=col.Name %> >= <%=ToFirstLetterCamel(col.Name) %>Range.StartTime && d.<%=col.Name %> <= <%=ToFirstLetterCamel(col.Name) %>Range.EndTime)
                <% continue;}%>
                <%if(GetCSharpTypeByProp(col)=="string"){ %>
                .WhereIf(!input.<%=col.Name %>.IsNullOrWhiteSpace(), a => a.<%=col.Name %>.Contains(input.<%=col.Name %>))
                <% continue;}%>
                <%if(col.PropertyType.IsValueType){ %>
                .WhereIf(input.<%=col.Name %>.HasValue, a => a.<%=col.Name %> == input.<%=col.Name %>.Value)
                <% continue;}%>
                <%}%>
                ;
        }
    }
}