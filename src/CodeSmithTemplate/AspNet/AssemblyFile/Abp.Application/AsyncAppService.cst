<%@ Template Language="C#" TargetLanguage="C#" Src="../../../CommonCode.cs" Inherits="CodeSmithTemplate.CommonCode" Encoding="utf-8" %>
<%@ Register Template="../Helper/AssemblyFileProperty.cst" Name="AssemblyFileProperty" MergeProperties="True" %>  
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Linq" %>
<%@ Assembly Src="../../../ClassNames.cs" %>
<%@ Assembly Src="../blqw.CSComment/CSComment.cs" %>
<%@ Import Namespace="blqw.Reflection" %>
<%@ Assembly Src="../AssemblyFileHelper.cs" %>
<%@ Import Namespace="CodeSmithTemplate" %>
<%@ Import Namespace="CodeSmithTemplate.AspNet.AssemblyFile" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%
var names = GetAssemblyFileNames(DllFolder, ProjectName, EntityName, PermissionModuleName);
var assType = AssemblyFileHelper.GetAssemblyType(names.CoreDllFile, EntityName);
var entityColumns = AssemblyFileHelper.GetProperties(assType);
var pk = "Id";
var pktype = AssemblyFileHelper.GetPropertyType(assType, pk);
var pkDeaultValueString = AssemblyFileHelper.GetPropertyDefaultValueString(assType, pk);
%>
using System;
using System.Linq;
using System.Threading.Tasks;
using Abp.Authorization;
using Abp.Domain.Repositories;
using Abp.Extensions;
using Abp.Linq.Extensions;
using <%=ProjectName %>.Authorization;
using <%=assType.Namespace %>.Dto;

namespace <%=assType.Namespace %>
{
    /// <summary>
    /// <%=AssemblyFileHelper.GetClassSummary(assType) %>  服务实现
    /// </summary>
    public partial class <%=names.AppServiceName %> : AsyncCrudAppServiceBase<<%=EntityName %>, <%=names.QueryDtoName %>, <%=pktype %>, <%=names.GetAllInputName %>, <%=names.CreateInputName %>, <%=names.UpdateInputName %>>, I<%=names.AppServiceName %>
    {
        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="<%=ToFirstLetterCamel(EntityName) %>repository"></param>
        public <%=names.AppServiceName %>(IRepository<<%=EntityName %>, <%=pktype %>> <%=ToFirstLetterCamel(EntityName) %>repository) : base(<%=ToFirstLetterCamel(EntityName) %>repository)
        {
            GetAllPermissionName = <%=names.AppServicePermissionPrefix %>;
            CreatePermissionName = <%=names.AppServicePermissionPrefix %>_Create;
            UpdatePermissionName = <%=names.AppServicePermissionPrefix %>_Edit;
            DeletePermissionName = <%=names.AppServicePermissionPrefix %>_Delete;
        }
        
        protected override IQueryable<<%=EntityName %>> CreateFilteredQuery(<%=names.GetAllInputName %> input)
        {
            return base.CreateFilteredQuery(input)
                <%foreach (var col in entityColumns){%>
                <%if(IsIn(col.Name,"Id")){continue;} %>
                <%if(IsAbpCreationAudited(col)){continue;} %>
                <%if(col.PropertyType.IsValueType || IsAbpValueObject(col)){continue;} %>
                <%if(IsList(col)){continue;} %>
                <%if(AssemblyFileHelper.GetCSharpNullType(col, true)=="string"){ %>
                .WhereIf(input.<%=col.Name %>.IsNullOrWhiteSpace(), a => a.<%=col.Name %> == input.<%=col.Name %>)
                <%}%>
                <%}%>
                ;
        }
        
        public Task<<%=names.QueryDtoName %>> CreateOrUpdate(<%=names.CreateOrUpdateInputName %> input)
        {
            if (input.Id == <%=pkDeaultValueString %>)
            {
                return Create(input);
            }
            else
            {
                return Update(input);
            }
        }
    }
}