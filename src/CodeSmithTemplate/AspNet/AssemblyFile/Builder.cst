<%@ Template Language="C#" TargetLanguage="C#" Src="../../CommonCode.cs" Inherits="CodeSmithTemplate.CommonCode" Encoding="utf-8" %>
<%@ Register Template="Helper/AssemblyFileProperty.cst" Name="AssemblyFileProperty" MergeProperties="True" %>  
<%@ Register Template="Helper/GenerateLayerProperty.cst" Name="GenerateLayerProperty" MergeProperties="True" %> 
<%@ Register Template="Helper/GenerateConfigProperty.cst" Name="GenerateConfigProperty" MergeProperties="True" %> 
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Linq" %>
<%@ Assembly Src="../../ClassNames.cs" %>
<%@ Assembly Src="blqw.CSComment/CSComment.cs" %>
<%@ Import Namespace="blqw.Reflection" %>
<%@ Assembly Src="AssemblyFileHelper.cs" %>
<%@ Import Namespace="CodeSmithTemplate" %>
<%@ Import Namespace="CodeSmithTemplate.AspNet.AssemblyFile" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.IO" %>
<%
// 设定输出文件的顶级根目录
if (!Directory.Exists(OutputDirectory)) Directory.CreateDirectory(OutputDirectory);

ClassNames N = AssemblyFileHelper.Init(this);
if(AppServiceType == AppServiceType.纯管理后台应用)
{
    var currClassTemplateName = "Abp.Application";
    var root_directory = OutputDirectory + "\\" + N.ApplicationAssemblyName + "\\";
    var directory = root_directory + N.EntityDirectoryName ;
    
    RenderToFile(AppIAsyncService, currClassTemplateName + "\\IAsyncAppService.cst", directory, "I" + N.AppServiceName);
    RenderToFile(AppAsyncService, currClassTemplateName + "\\AsyncAppService.cst", directory, N.AppServiceName);
}
else if(AppServiceType == AppServiceType.混合应用)
{
    var currClassTemplateName = "Abp.Application";
    var root_directory = OutputDirectory + "\\" + N.ApplicationAssemblyName + "\\";
    var directory = root_directory + N.EntityDirectoryName;
    
    RenderToFile(AppAsyncService, currClassTemplateName + "\\BaseAppService.cst", directory, N.BaseAppServiceName); 
    RenderToFile(AppIAsyncService, currClassTemplateName + "\\IAppService.cst", directory, "I" + N.AppServiceName);
    RenderToFile(AppAsyncService, currClassTemplateName + "\\AppService.cst", directory, N.AppServiceName); 
    RenderToFile(AppIAsyncService, currClassTemplateName + "\\IMgmtAppService.cst", directory, "I" + N.MgmtAppServiceName);
    RenderToFile(AppAsyncService, currClassTemplateName + "\\MgmtAppService.cst", directory, N.MgmtAppServiceName); 
}
{
    var currClassTemplateName = "Abp.Application\\Dto";
    var root_directory = OutputDirectory + "\\" + N.ApplicationAssemblyName + "\\";
    var directory = root_directory + N.EntityDirectoryName+"\\Dto\\";
    
    RenderToFile(AppGetAllDto, currClassTemplateName + "\\GetAllInput.cst", directory, N.GetAllInputName);
    RenderToFile(AppQueryDto, currClassTemplateName + "\\QueryDto.cst", directory, N.QueryDtoName);
    RenderToFile(AppDto, currClassTemplateName + "\\Dto.cst", directory, N.DtoName);
    if(AppServiceType == AppServiceType.混合应用)
    {
        RenderToFile(AppDto, currClassTemplateName + "\\CreateInputDto.cst", directory, N.CreateInputName);
    }
}
{
    var currClassTemplateName = "Abp.VueSpaWeb";
    var directory = OutputDirectory + "\\";    
    RenderToFile(VueSpaWeb, currClassTemplateName + "\\Index.cst", directory,  N.VueWebPageName + ".vue");
}
{
    var currClassTemplateName = "Abp.VueSpaWeb";
    RenderOtherTemplate(BuildMenu, currClassTemplateName + "\\BuildMenu.cst");
}
//指定使用资源管理器打开文件夹
//System.Diagnostics.Process.Start("Explorer.exe", OutputDirectory);
//System.AppDomain.Unload(System.AppDomain.CurrentDomain);
%>